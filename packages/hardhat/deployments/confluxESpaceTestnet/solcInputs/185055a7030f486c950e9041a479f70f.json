{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/SwapContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\ncontract SwapContract {\r\n    IERC20 public token1; // ETH\r\n    IERC20 public token2; // USDT\r\n\r\n    constructor(IERC20 _token1, IERC20 _token2) {\r\n        token1 = _token1;\r\n        token2 = _token2;\r\n    }\r\n\r\n    function swap(uint256 token1Amount, uint256 token2Amount) public {\r\n    require(token1.balanceOf(msg.sender) >= token1Amount, \"Not enough Token1\");\r\n    require(token2.balanceOf(address(this)) >= token2Amount, \"Not enough Token2 in contract\");\r\n\r\n    require(token1.transferFrom(msg.sender, address(this), token1Amount), \"Token1 transfer failed\");\r\n    require(token2.transfer(msg.sender, token2Amount), \"Token2 transfer failed\");\r\n}\r\n\r\n    function swapToken1ForToken2(uint256 token1Amount, uint256 token2Amount) public {\r\n        require(token1.balanceOf(msg.sender) >= token1Amount, \"Not enough Token1\");\r\n        require(token2.balanceOf(address(this)) >= token2Amount, \"Not enough Token2 in contract\");\r\n\r\n        require(token1.transferFrom(msg.sender, address(this), token1Amount), \"Token1 transfer failed\");\r\n        require(token2.transfer(msg.sender, token2Amount), \"Token2 transfer failed\");\r\n    }\r\n\r\n    function swapToken2ForToken1(uint256 token2Amount, uint256 token1Amount) public {\r\n        require(token2.balanceOf(msg.sender) >= token2Amount, \"Not enough Token2\");\r\n        require(token1.balanceOf(address(this)) >= token1Amount, \"Not enough Token1 in contract\");\r\n\r\n        require(token2.transferFrom(msg.sender, address(this), token2Amount), \"Token2 transfer failed\");\r\n        require(token1.transfer(msg.sender, token1Amount), \"Token1 transfer failed\");\r\n    }\r\n}"
    },
    "contracts/Wallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Wallet {\r\n    mapping(address => uint) balances;\r\n    mapping(address => uint) stakedBalances;\r\n    mapping(address => uint) stakingTimestamps;\r\n\r\n    event Staked(address indexed user, uint amount, uint timestamp);\r\n    event Unstaked(address indexed user, uint amount, uint timestamp);\r\n\r\n    function deposit() public payable {\r\n        require(msg.value > 0, \"Deposit value must be greater than 0\");\r\n        balances[msg.sender] += msg.value;\r\n    }\r\n\r\n    function getBalance() public view returns (uint) {\r\n        return balances[msg.sender];\r\n    }\r\n\r\n    function stake(uint _amount) public {\r\n        require(_amount <= balances[msg.sender], \"Insufficient balance to stake\");\r\n        balances[msg.sender] -= _amount;\r\n        stakedBalances[msg.sender] += _amount;\r\n        stakingTimestamps[msg.sender] = block.timestamp;\r\n\r\n        emit Staked(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function unstake() public {\r\n        require(stakedBalances[msg.sender] > 0, \"No staked balance to withdraw\");\r\n        require(block.timestamp >= stakingTimestamps[msg.sender] + 1 days, \"Staking period not yet completed\");\r\n\r\n        uint amountToUnstake = stakedBalances[msg.sender];\r\n        balances[msg.sender] += amountToUnstake;\r\n        stakedBalances[msg.sender] = 0;\r\n\r\n        emit Unstaked(msg.sender, amountToUnstake, block.timestamp);\r\n    }\r\n\r\n    function getStakedBalance() public view returns (uint) {\r\n        return stakedBalances[msg.sender];\r\n    }\r\n}\r\n "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}